<?php

namespace App\Repository;

use App\Entity\Actualites;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * ActualitesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActualitesRepository  extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Actualites::class);
    }

    public function findAll()
    {
        return $this->findBy([], ['updated' => 'desc']);
    }

    /**
     * @param int $nb
     * @return array
     */
    public function findLast($nb = 3)
    {
        return $this->createQueryBuilder('a')
                ->orderBy('a.dateactu', 'desc')
                ->setMaxResults($nb)
                ->getQuery()
                ->getResult();
    }

    /**
     * @param $debut
     * @param $nb
     * @return array
     */
    public function findPagination($debut, $nb)
    {
        return $this->createQueryBuilder('a')
            ->orderBy('a.dateactu', 'desc')
            ->setFirstResult($debut)
            ->setMaxResults($nb)
            ->getQuery()
            ->getResult();
    }

    public function getTags()
    {
        $blogTags = $this->createQueryBuilder('b')
            ->select('b.keywords')
            ->getQuery()
            ->getResult();

        $tags = [];
        foreach ($blogTags as $blogTag)
        {
            $tags = array_merge(explode(",", (string) $blogTag['keywords']), $tags);
        }

        foreach ($tags as &$tag)
        {
            $tag = trim($tag);
        }

        return $tags;
    }

    public function getTagWeights($tags)
    {
        $tagWeights = [];
        if (empty($tags))
            return $tagWeights;

        foreach ($tags as $tag)
        {
            $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag] + 1 : 1;
        }
        // Shuffle the tags
        uksort($tagWeights, fn() => random_int(0, mt_getrandmax()) > random_int(0, mt_getrandmax()));

        $max = max($tagWeights);

        // Max of 5 weights
        $multiplier = ($max > 5) ? 5 / $max : 1;
        foreach ($tagWeights as &$tag)
        {
            $tag = ceil($tag * $multiplier);
        }

        return $tagWeights;
    }

    public function findSearchActualitesBuilder ($type_actualite,$data)
    {
        $qb = $this->createQueryBuilder('a','a.id');
        $qb->select ('a.id');

        $qb->innerJoin($type_actualite, 'tyac'  , 'WITH' , 'a.id = tyac.id');

        $projet_id = $data['projet'];
        if ($projet_id != '')
        {
            if ($projet_id == "-2")
            {

            }
            else
            {
                if ($projet_id == "-1")
                {
                    $qb->innerJoin('CRESTICProjetsBundle:Projets', 'pr'  , 'WITH' , 'a.projet = pr.id');
                }
                else
                {
                    $qb->innerJoin('CRESTICProjetsBundle:Projets', 'pr'  , 'WITH' , 'a.projet = pr.id AND pr.id = :projet_id');
                    $qb->setParameter('projet_id' ,$projet_id);

                }
            }
        }

        $equipe_id = $data['equipe'];
        if ($equipe_id != '')
        {
            if ($equipe_id == "-2")
            {

            }
            else
            {
                if ($equipe_id == "-1")
                {

                    $qb->innerJoin('CRESTICEquipesBundle:Equipes', 'eq'  , 'WITH' , 'a.equipe = eq.id');
                }
                else
                {
                    $qb->innerJoin('CRESTICEquipesBundle:Equipes', 'eq'  , 'WITH' , 'a.equipe = eq.id AND eq.id = :equipe_id');
                    $qb->setParameter('equipe_id' ,$equipe_id);
                }
            }
        }

        $plateforme_id = $data['plateforme'];
        if ($plateforme_id != '')
        {
            if ($plateforme_id == "-2")
            {

            }
            else
            {
                if ($plateforme_id == "-1")
                {

                    $qb->innerJoin('CRESTICPlateformesBundle:Plateformes', 'pl'  , 'WITH' , 'a.plateforme = pl.id');
                }
                else
                {
                    $qb->innerJoin('CRESTICPlateformesBundle:Plateformes', 'pl'  , 'WITH' , 'a.plateforme = pl.id AND pl.id = :plateforme_id');
                    $qb->setParameter('plateforme_id' ,$plateforme_id);
                }
            }
        }


        $keywords = $data['keywords'];
        if ($keywords != '')
        {
            $qb->where('a.keywords LIKE :keywords OR a.titre LIKE :keywords OR a.message LIKE :keywords OR a.created LIKE :keywords OR a.updated LIKE :keywords');
            $qb->setParameter('keywords',"%".$keywords."%");
        }

        /*$dateDebut  = $data['dateDebut'];
        $dateFin    = $data['dateFin'];
        if ($dateDebut != '' && $dateFin != '')
        {

            $qb->where('( :dateDebut <= a.created AND a.created <= :dateFin ) OR (:dateDebut <= a.updated AND a.updated <= :dateFin)');
            $qb->setParameter('dateDebut' ,$dateDebut);
            $qb->setParameter('dateFin'   ,$dateFin);

        }*/

        return $qb;

    }

    public function findSearchActualites($type_actualite , $data)
    {
        $result =  $this->findSearchActualitesBuilder($type_actualite,$data)->getQuery()->getResult();
        return $result;
    }
}
