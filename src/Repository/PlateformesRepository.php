<?php

namespace App\Repository;

use App\Entity\Plateformes;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * PlateformesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlateformesRepository  extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Plateformes::class);
    }

    /**
     * @param null $array_options
     */
    public function findAllPlateformesBuilder($array_options = null): ?\Doctrine\ORM\QueryBuilder
    {
        $result = null;

        switch ($array_options['role'])
        {
            case 'ROLE_ADMINISTRATEUR':
            {
                $result =  $this->createQueryBuilder('a','a.id')
                                ->orderBy('a.nom', 'ASC');
                break;
            }

            case 'ROLE_RESPONSABLE':
            {
                $result =  $this->createQueryBuilder('a','a.id')
                                ->where  ('a.responsable = ?1')
                                ->orderBy('a.nom', 'ASC')
                                ->setParameter(1,$array_options['user_id']);
                break;
            }

            case 'ROLE_MEMBRE':
            {
                break;
            }

            case 'ROLE_VISITEUR':
            {
                break;
            }

            default :
            {
                $result =  $this->createQueryBuilder('a','a.id')
                                ->orderBy('a.nom', 'ASC');
                break;
            }
        }

        return $result;
    }

    public function findAllPlateformes($array_options = null)
    {
        return $this->findAllPlateformesBuilder($array_options)->getQuery()->getResult();
    }

    /**
     * @param int $nb
     * @return array
     */
    public function findLast($nb = 3)
    {
        return $this->createQueryBuilder('a')
            ->orderBy('a.updated', 'desc')
            ->setMaxResults($nb)
            ->getQuery()
            ->getResult();
    }

    public function findAllPlateformesResponsable($user)
    {
        return $this->createQueryBuilder('e')
            ->where('e.responsable = :user')
            ->setParameter('user', $user)
            ->orderBy('e.nom', 'ASC')
            ->getQuery()
            ->getResult();
    }
}
