<?php

namespace App\Repository;

use App\Entity\Equipes;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;

/**
 * EquipesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EquipesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Equipes::class);
    }

    /**
     * @param int $nb
     *
     * @return array
     */
    public function findLast($nb = 3)
    {
        return $this->createQueryBuilder('a')
            ->orderBy('a.updated', 'desc')
            ->setMaxResults($nb)
            ->getQuery()
            ->getResult();
    }


    /**
     * @param null $array_options
     */
    public function findAllEquipesBuilder($array_options = null): ?\Doctrine\ORM\QueryBuilder
    {
        $result = null;
        if (is_array($array_options) && array_key_exists('role', $array_options)) {
            switch ($array_options['role']) {
                case 'ROLE_ADMINISTRATEUR':
                {
                    $result = $this->createQueryBuilder('a', 'a.id')
                        ->where('a.active = 1')
                        ->orderBy('a.nom', 'ASC');
                    break;
                }

                case 'ROLE_RESPONSABLE':
                {
                    $result = $this->createQueryBuilder('a', 'a.id')
                        ->where('a.responsable = ?1 and a.active = 1')
                        ->orderBy('a.nom', 'ASC')
                        ->setParameter(1, $array_options['user_id']);
                    break;
                }

                case 'ROLE_UTILISATEUR':
                {
                    $result = $this->createQueryBuilder('a', 'a.id')
                        ->where('a.responsable = ?1 and a.active = 1')
                        ->orderBy('a.nom', 'ASC')
                        ->setParameter(1, $array_options['user_id']);
                    break;
                }

                case 'ROLE_VISITEUR':
                {
                    break;
                }

                default :
                {
                    $result = $this->createQueryBuilder('a', 'a.id')
                        ->where('a.active = 1')
                        ->orderBy('a.nom', 'ASC');
                    break;
                }
            }
        } else {
            $result = $this->createQueryBuilder('a', 'a.id')
                ->where('a.active = 1')
                ->orderBy('a.nom', 'ASC');
        }

        return $result;
    }

    /**
     * @param null $array_options
     *
     * @return array
     */

    public function findAllEquipes($array_options = null)
    {
        return $this->findAllEquipesBuilder($array_options)->getQuery()->getResult();
    }

    public function findAllEquipesActives()
    {
        return $this->createQueryBuilder('e')
            ->andWhere('e.active = 1')
            ->orderBy('e.nom', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function findEquipesDepartement($departement)
    {
        return $this->createQueryBuilder('e')
            ->innerJoin('CRESTICEquipesBundle:EquipesHasDepartements', 'ed', 'WITH', 'e.id = ed.equipe')
            ->where('ed.departement = :departement')
            ->andWhere('e.active = 1')
            ->setParameter('departement', $departement)
            ->orderBy('e.nom', 'ASC')
            ->getQuery()
            ->getResult();

    }

    public function findAllEquipesResponsable($user)
    {
        return $this->createQueryBuilder('e')
            ->where('e.active = 1')
            ->andWhere('e.responsable = :user')
            ->setParameter('user', $user)
            ->orderBy('e.nom', 'ASC')
            ->getQuery()
            ->getResult();
    }

}
